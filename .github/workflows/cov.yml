name: coverage

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]

jobs:
  Coverage:
    name: coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:0.22.0
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Generate code coverage
        id: coverage
        run: |
            echo "test"
        #   OUTPUT=$(cargo tarpaulin --verbose --workspace --timeout 120 --out xml --avoid-cfg-tarpaulin)
        #   echo "::set-output name=coverage::$OUTPUT"
        #   SUMMARY=$(echo "$OUTPUT" | grep -oP '\d+\.\d+% coverage, \d+/\d+ lines covered')
        #   echo "::set-output name=summary::$SUMMARY"         
    #   - name: Comment PR
    #     if: github.event_name == 'pull_request'
    #     uses: actions/github-script@v3
    #     with:
    #       github-token: ${{secrets.GITHUB_TOKEN}}
    #       script: |
    #         const summary = `${{steps.coverage.outputs.summary}}`
    #         const coverage = `${{steps.coverage.outputs.coverage}}`
    #         const issue_number = context.issue.number
    #         github.issues.createComment({
    #             issue_number: issue_number,
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             body: `# Coverage\n\n${summary}\n\n\`\`\`\n${coverage}\n\`\`\``
    #         })
  linter:
    name: linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust and cargo
        run:  curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Run Clippy and Format
        id: linter
        run: |
            CLIPPY_OUTPUT=$(cargo clippy --all-targets -- -D warnings 2>&1 || true)
            echo "::set-output name=clippy::$CLIPPY_OUTPUT"
            FMT_OUTPUT=$(cargo fmt --all -- --check --verbose 2>&1 || true)
            echo "::set-output name=fmt::$FMT_OUTPUT"
      - name: Use clippy output
        run: |
            echo "Clippy output: ${{ steps.linter.outputs.clippy }}"
            echo "fmt output: ${{ steps.linter.outputs.fmt }}"
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const clippy = `${{steps.linter.outputs.clippy}}`
            const fmt = `${{steps.linter.outputs.fmt}}`
   
            const issue_number = context.issue.number
            github.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `# Linter\n\n\`\`\`\n${clippy}\n\`\`\`\n #Format \n\`\`\`\n${fmt}\n\`\`\``
            })
